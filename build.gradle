import net.minecraftforge.gradle.common.util.RunConfig
import net.minecraftforge.gradle.patcher.task.TaskReobfuscateJar
import net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'http://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.110.1-SNAPSHOT', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

repositories {
    mavenLocal()
}

version = "0.8.2"
group= "gigaherz.packingtape" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "PackingTape-1.13.2"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'snapshot', version: '20190215-1.13.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.noansi', "false"

            ideaModule "${project.name}_main"

            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.noansi', "false"

            ideaModule "${project.name}_main"

            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.70'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "packingtape",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
